generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}





model User {
  id            Int      @id @default(autoincrement())
  username      String      
  password      String
  email         String      @unique
  role          String?      
  reliabilityScore  Int @default(50)
  emailVerified DateTime?
  profilePicture         String?
  firstName    String?
  lastName     String?
  over13  Boolean?
  parentEmail  String?
  pFirstName   String?
  pLastName    String?
  createdAt    DateTime    @default(now())
  updatedAt     DateTime?    @updatedAt
  accounts      Account[]
  userMarks         UserMark[] 
  
  // sessions      Session[]
}

model Account {
  id        String      @id @default(uuid())
  userId    Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  provider  String
  access_token String? @db.Text
  scope String? @db.Text
  token_type String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}




model Image {
  id        Int      @id @default(autoincrement())
  cameraId  Int      // many to one relationship with camera table (not implemented yet)
  imageURL  String
  scouted  Boolean  @default(false)
  rockCount Int?
  captureDate DateTime
  captureTime DateTime
  roverLocation String
  resolution String
  pixelDensity String  //switch to user marks
  rockQuadrants RockQuadrant[]


}

model RockQuadrant {
  id        Int      @id @default(autoincrement())
  imageId   Int 
  quadrantNumber Int
  x         Int
  y         Int
  width     Int
  height    Int

  image Image @relation(fields: [imageId], references: [id])
}

model UserMark {
  id        Int    @id @default(autoincrement())
  userId    Int
  imageId   Int
  quadrantId Int?
  rockCount Int?

   user      User  @relation(fields: [userId], references: [id], onDelete: Cascade)


 @@unique([userId, imageId], name: "userId_imageId_unique")

  
}




//model Session {
// id           String   @id @default(cuid())
//  sessionToken String   @unique 
//  userId       Int   
 // expires      DateTime
 // role         String
 // user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//}



// model Group {
//  id        Int      @id @default(autoincrement())
 // name      String
 // desciption String?
//  password  String?
//  groupPicture String?
//  memberCount Int
 // createdAt DateTime @default(now())
 // updatedAt DateTime? @updatedAt
//  users     User[] @relation(fields: [userId], references: [id])
//}
