generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int            @id @default(autoincrement())
  username         String
  password         String
  email            String         @unique
  role             String?
  emailVerified    DateTime?
  profilePicture   String?
  firstName        String?
  lastName         String?
  over13           Boolean?
  parentEmail      String?
  pFirstName       String?
  pLastName        String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime?      @updatedAt
  reliabilityScore Int            @default(50)
  accounts         Account[]
  userGeometries   UserGeometry[]
  userMarks        UserMark[]
}

model Account {
  id           String    @id @default(uuid())
  userId       Int
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt
  provider     String
  access_token String?
  scope        String?
  token_type   String?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  id           String    @id @default(uuid())
  userId       Int
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt
  provider     String
  access_token String?
  scope        String?
  token_type   String?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Image {
  id            Int            @id @default(autoincrement())
  cameraId      Int
  imageURL      String
  captureDate   DateTime
  captureTime   DateTime
  id            Int            @id @default(autoincrement())
  cameraId      Int
  imageURL      String
  captureDate   DateTime
  captureTime   DateTime
  roverLocation String
  resolution    String
  pixelDensity  String
  rockCount     Int?
  scouted       Boolean        @default(false)
  numQuadrants  Int?
  resolution    String
  pixelDensity  String
  rockCount     Int?
  scouted       Boolean        @default(false)
  numQuadrants  Int?
  rockQuadrants RockQuadrant[]
  UserGeometry  UserGeometry[]
  UserGeometry  UserGeometry[]
}

model RockQuadrant {
  id             Int   @id @default(autoincrement())
  imageId        Int
  x              Int
  y              Int
  width          Int
  height         Int
  id             Int   @id @default(autoincrement())
  imageId        Int
  x              Int
  y              Int
  width          Int
  height         Int
  quadrantNumber Int
  image          Image @relation(fields: [imageId], references: [id])
  image          Image @relation(fields: [imageId], references: [id])
}

model UserMark {
  id         Int  @id @default(autoincrement())
  userId     Int
  imageId    Int
  id         Int  @id @default(autoincrement())
  userId     Int
  imageId    Int
  quadrantId Int?
  rockCount  Int?
  user       User @relation(fields: [userId], references: [id], onDelete: Cascade)
  rockCount  Int?
  user       User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, imageId], name: "userId_imageId_unique")
}

model UserGeometry {
  id      Int                    @id @default(autoincrement())
  userId  Int
  drawing Unsupported("raster")?
  imageId Int
  user    User                   @relation(fields: [userId], references: [id])
  Image   Image                  @relation(fields: [imageId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_usergeometry_image")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

/// We could not retrieve columns for the underlying table. Either it has none or you are missing rights to see them. Please check your privileges.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
// model rasters {
// }
